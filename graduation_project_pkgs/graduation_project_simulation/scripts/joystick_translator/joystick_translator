#!/usr/bin/env python

import rospy
import numpy as np
from graduation_project_simulation.msg import cruiseControl
from prius_msgs.msg import Control
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Joy
from PyQt5 import QtWidgets, uic
import sys


STEERING_AXIS = 0
THROTTLE_AXIS = 5

SQUARE = 0
CROSS = 1
CIRCLE = 2
TRIANGLE = 3
L1 = 4
R1 = 5
L2 = 6
R2 = 7


class Translator(QtWidgets.QWidget):
	def __init__(self):
		# Load UserInterface
		super(Translator, self).__init__()
		uic.loadUi('/home/gradproj2020/catkin_ws/src/graduation_project_pkgs/graduation_project_simulation/scripts/joystick_translator/gui.ui', self)

		self._joystick_subscriber = rospy.Subscriber("joy", Joy, self.joystick_callback)
		self._velocity_subscriber = rospy.Subscriber("base_pose_ground_truth", Odometry, self.odometry_callback)
		self._joystick_publisher = rospy.Publisher('prius', Control, queue_size=1)
		self._cruise_control_publisher = rospy.Publisher('cruise_control', cruiseControl, queue_size=1)
		self._last_published_time = rospy.get_rostime()
		self._last_published = None
		self._cruise_control_state = False
		self._circle_flag = True
		self._R1_flag = False
		self._L1_flag = False
		self._cruise_control_speed = 0
		self._MAX_SPEED = 40
		self.timer = rospy.Timer(rospy.Duration(1./20.), self.timer_callback)
        
	def timer_callback(self, event):
		if self._last_published and self._last_published_time < rospy.get_rostime() + rospy.Duration(1.0/20.):
			self.joystick_callback(self._last_published)

	def odometry_callback(self, odometry):
		current_velocity = np.sqrt((odometry.twist.twist.linear.x)**2 + (odometry.twist.twist.linear.y)**2 + (odometry.twist.twist.linear.z)**2)
		self.velocity_lcdnumber.display(int(current_velocity * 3.6))

	def joystick_callback(self, message):
		rospy.logdebug("joy_translater received axes %s",message.axes)
		# Create message objects
		cruise_control = cruiseControl()
		command = Control()
		# cruise_control.header = message.header
		command.header = message.header

		# Get throttle/breaking value
		if message.axes[THROTTLE_AXIS] >= 0:
			command.throttle = message.axes[THROTTLE_AXIS]
			command.brake = 0.0
		else:
			command.brake = message.axes[THROTTLE_AXIS] * -1
			command.throttle = 0.0
		
		self.throttle_scrollbar.setValue(int(message.axes[THROTTLE_AXIS] * -100))

		# Get steering value
		command.steer = message.axes[STEERING_AXIS]
		self.steering_scrollbar.setValue(int(message.axes[STEERING_AXIS]* -100))

		# Get gears value
		if message.buttons[TRIANGLE]:
			command.shift_gears = Control.FORWARD
			self.gears_lineedit.setText('D')
		elif message.buttons[CROSS]:
			command.shift_gears = Control.NEUTRAL
			self.gears_lineedit.setText('N')
		elif message.buttons[SQUARE]:
			command.shift_gears = Control.REVERSE
			self.gears_lineedit.setText('R')
		else:
			command.shift_gears = Control.NO_COMMAND

		# Get cruise control state and value
		if message.buttons[CIRCLE] and self._circle_flag:
			self._circle_flag = False
			self._cruise_control_state = not self._cruise_control_state
			self.cruise_radiobutton.setChecked(self._cruise_control_state)
		elif not message.buttons[CIRCLE]:
			self._circle_flag = True
			
		if self._cruise_control_state:
			cruise_control.cruise_control = cruise_control.CRUISE_CONTROL_ON

		else:
			cruise_control.cruise_control = cruise_control.CRUISE_CONTROL_OFF


		if message.buttons[R1] and self._R1_flag:
			self._R1_flag = False
			if self._cruise_control_speed < self._MAX_SPEED:
				self._cruise_control_speed += 1
				self.cruise_lcdnumber.display(self._cruise_control_speed)
		elif not message.buttons[R1]:
			self._R1_flag = True

		if message.buttons[L1] and self._L1_flag:
			self._L1_flag = False
			if self._cruise_control_speed > 0:
				self._cruise_control_speed -= 1
				self.cruise_lcdnumber.display(self._cruise_control_speed)
		elif not message.buttons[L1]:
			self._L1_flag = True

		cruise_control.cruise_control_speed = self._cruise_control_speed

		self._last_published = message
		self._joystick_publisher.publish(command)
		self._cruise_control_publisher.publish(cruise_control)
	
def main():
	rospy.init_node('joy_translator')
	app = QtWidgets.QApplication(sys.argv)
	window = Translator()
	window.setWindowTitle('Control Window')
	window.show()
	app.exec_()

	while not rospy.is_shutdown():
		rospy.spin()
	

if __name__ == '__main__':
	main()
